{"name":"Tuco tuco","tagline":"Yet another South American rodent...a Capybara like web app testing tool for Elixir.","body":"# TucoTuco\r\n[![Build Status](https://travis-ci.org/stuart/tuco_tuco.png?branch=master)](https://travis-ci.org/stuart/tuco_tuco)\r\n\r\nTesting for Elixir web applications.\r\n\r\nTucoTuco helps you test your web application by running a web browser\r\nand simulating user interaction with your application.\r\n\r\nWith a DSL approximating that of Capybara's, it should be\r\neasy for developers to write tests for a web application.\r\n\r\n## Setup\r\nIn your mix.exs add the following to the test environment deps:\r\n\r\n   ```{:tucotuco, github: \"stuart/tuco_tuco\"} ```\r\n\r\nEither specify tuco_tuco in your application block in mix.exs or do:\r\n\r\n   ``` :application.start TucoTuco ```\r\n\r\n## Requirements\r\nTesting requires that you have Phantomjs, Firefox or ChromeDriver installed.\r\nYou can also test against a remote WebDriver server such as a Selenium instance.\r\n\r\n## Documentation\r\nHere is a rough guide to using TucoTuco.\r\n\r\n### Navigation\r\n  Visit sends the browser to other pages.\r\n\r\n  ```elixir\r\n    visit \"http://elixir-lang.org\"\r\n    visit \"/login\"\r\n  ```\r\n\r\n  Relative urls will be appended with the TucoTuco.app_root value.\r\n\r\n  You can go back and forward in the browser history:\r\n\r\n  ```elixir\r\n    go_forward\r\n    go_back\r\n  ```\r\n\r\n  And query the current url:\r\n\r\n  ```elixir\r\n    current_url\r\n    current_path\r\n    current_query\r\n    current_port\r\n  ```\r\n\r\n### Clicking\r\n  You can click on a link or button with the ```click_link``` and\r\n  ```click_button``` commands.\r\n\r\n  ```elixir\r\n    click_link \"Home\"\r\n    click_link \"i3\"\r\n    click_button \"Back\"\r\n    click_button \"Submit\"\r\n  ```\r\n\r\n  Yet to come: mouse movements.\r\n\r\n### Forms\r\n  Interacting with forms is easy with TucoTuco's functions for that:\r\n\r\n  ```elixir\r\n    fill_in \"Login\", \"Stuart\"\r\n    fill_in \"Password\", \"secret_password\"\r\n    click_button \"Submit\"\r\n    choose \"A radio button\"\r\n    select \"Carrot\"\r\n    select \"Tomato\", from: \"Vegetables\"\r\n    check \"A Checkbox\"\r\n  ```\r\n\r\n  You can even attach files:\r\n\r\n  ```elixir\r\n    attach_file \"Upload Picture\", \"path/to/my_photo.png\"\r\n  ```\r\n\r\n### Querying\r\n  Getting information about the page to use in assertions:\r\n\r\n  ```elixir\r\n    Page.has_css? \"table thead tr.header\"\r\n    Page.has_xpath? \"//foo/bar[@name='baz']\"\r\n    Page.has_text? \"Some text from the page\"\r\n    Page.has_link? \"Back\"\r\n  ```\r\n\r\n  There are many more. Check the documentation for them.\r\n\r\n### Assertions\r\n  TucoTuco supplies two assertions that you can use directly in tests:\r\n\r\n  ```elixir\r\n    assert_selector :xpath, \"//foo/bar\"\r\n    refute_selector :xpath, \"//baz[@class='bob']\"\r\n  ```\r\n\r\n### Elements\r\n  The following functions for manipulating elements are imported from\r\n  WebDriver, they all take a WebDriver.Element.Reference record as the\r\n  first argument. Luckily that is exactly what all the finders return:\r\n\r\n  ```elixir\r\n    Element.attribute reference, :a_html_attribute\r\n    Element.clear reference\r\n    Element.click reference\r\n    Element.css reference, \"some-css-property-name\"\r\n    Element.displayed? reference\r\n    Element.enabled? reference\r\n    Element.equals? reference, other_reference\r\n    Element.location? reference\r\n    Element.location_in_view? reference\r\n    Element.name reference\r\n    Element.selected? reference\r\n    Element.size reference\r\n    Element.submit reference\r\n    Element.text reference\r\n    Element.value reference, \"value to set\"\r\n  ```\r\n\r\n  For more detailed docs on the Element functions see\r\n  [WebDriver.Element](http://stuart.github.io/elixir-webdriver/WebDriver.Element.html).\r\n\r\n### Javascript\r\n  Javascript can be run using the ```execute_javascript``` and ```execute_async_javascript```\r\n  commands.\r\n\r\n  ```elixir\r\n    iex> execute_javascript \"return argument[0] * 10\", [3]\r\n    iex> 30\r\n  ```\r\n\r\n### Retrying\r\n  When you are testing applications that have Javascript modifying the page\r\n  it is possible that elements will not be available when you want them because\r\n  the browser script takes some time to run.\r\n\r\n  To alleviate this TucoTuco has retry settings. When retry is turned on all the\r\n  Page.has_foo? and action functions will retry for a set number of times before failing.\r\n\r\n  You can also use the retry function yourself like this:\r\n\r\n  ```elixir\r\n    # Find elements\r\n    TucoTuco.Finder.find using, selector\r\n\r\n    # Any function\r\n    TucoTuco.Retry.retry fn -> my_function(args) end\r\n  ```\r\n\r\n  Changing retry settings:\r\n\r\n  ```elixir\r\n    # Set retries on\r\n    TucoTuco.use_retries true\r\n    # Set the maximum retry time in milliseconds.\r\n    TucoTuco.max_retry_time 1000\r\n    # Set the delay between retries in milliseconds.\r\n    TucoTuco.retry_delay 20\r\n  ```\r\n\r\n### Multiple Sessions\r\n  You can run multiple sessions on different browser or on the same browser.\r\n  To start a session use:\r\n\r\n  ```\r\n    TucoTuco.start_session :browser_name, :session_name, browser_type\r\n  ```\r\n\r\n  Where the browser type is one of :phantomjs, :firefox or :chrome.\r\n  If the process :browser_name is already running the session will be started on\r\n  that, otherwise a new browser will start running.\r\n\r\n  Once you have multiple sessions running you can swap sessions with:\r\n\r\n  ```\r\n    TucoTuco.session :new_session\r\n  ```\r\n\r\n  And to get a list of sessions that are running:\r\n  ```\r\n    TucoTuco.sessions\r\n  ```\r\n\r\nExample Session from console:\r\n( some responses have been cut for brevity )\r\n\r\n```elixir\r\n  iex(1)> use TucoTuco.DSL\r\n  :ok\r\n  iex(2)> TucoTuco.start_session :test_browser, :tuco_test, :phantomjs\r\n  {:ok,\r\n   TucoTuco.SessionPool.SessionPoolState[current_session: :tuco_test,\r\n    app_root: nil]}\r\n  iex(3)> visit \"http://elixir-lang.org\"\r\n  iex(4)> current_url\r\n  \"http://elixir-lang.org/\"\r\n  iex(5)> click_link \"getting started guide\"\r\n  iex(6)> current_url\r\n  \"http://elixir-lang.org/getting_started/1.html\"\r\n  iex(7)> Page.has_css? \"article h1#toc_0\"\r\n  true\r\n  iex(8)> Page.has_text? \"Elixir also supports UTF-8 encoded strings:\"\r\n  true\r\n  iex(9)> click_link \"Next â†’\"\r\n  iex(10)> current_url\r\n  \"http://elixir-lang.org/getting_started/2.html\"\r\n  iex(11)> Page.has_xpath? \"//h1[.='2 Diving in']\"\r\n  true\r\n  iex(15)> go_back\r\n  iex(16)> current_path\r\n  \"/getting_started/1.html\"\r\n  iex(17)>\r\n```\r\n\r\n###Changelog\r\n\r\n2014-03-02\r\n  * 0.2.1\r\n  * Element functions from WebDriver\r\n  * Retries\r\n\r\n2014-03-04\r\n  * 0.3.0\r\n  * Added execute_javascript and execute_async_javascript\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}